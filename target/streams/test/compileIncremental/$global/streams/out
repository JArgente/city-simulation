[0m[[0m[0mdebug[0m] [0m[0mThe com.example.City$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(narrow,[Default]), UsedName(_tag,[Default]), UsedName(==,[Default]), UsedName(onSignal,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(CityInfo,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(context,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(unsafeCast,[Default]), UsedName(synchronized,[Default]), UsedName(com;example;City;init;,[Default]), UsedName(City,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receiveSignal,[Default]), UsedName(clone,[Default]), UsedName(receive,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(onMessage,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.City$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.City$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(CityInfo,[Default]), UsedName(City,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Action$GuardAction$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(com;example;Action;GuardAction;init;,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(GuardAction,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Action$GuardAction$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Action$GuardAction$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(GuardAction,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Action$BlacksmithAction$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(BlacksmithAction,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName(com;example;Action;BlacksmithAction;init;,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Action$BlacksmithAction$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Action$BlacksmithAction$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(BlacksmithAction,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Action$TavernAction$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(TavernAction,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]), UsedName(com;example;Action;TavernAction;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Action$TavernAction$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Action$TavernAction$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(TavernAction,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Action$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(CreatePopulation,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(Action,[Default]), UsedName(GuardAction,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(BlacksmithAction,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(TavernAction,[Default]), UsedName(!=,[Default]), UsedName(##,[Default]), UsedName(ActorAction,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Action$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Action$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(Action,[Default]), UsedName(GuardAction,[Default]), UsedName(BlacksmithAction,[Default]), UsedName(TavernAction,[Default]), UsedName(ActorAction,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Action$BlacksmithAction has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(BlacksmithAction,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName(com;example;Action;BlacksmithAction;init;,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Action$BlacksmithAction: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Action$BlacksmithAction.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(BlacksmithAction,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.City$CityInfo has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(lifeQuality,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(merchantActivity,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(copy$default$5,[Default]), UsedName(CityInfo,[Default]), UsedName(tavernOpen,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(com;example;City;CityInfo;init;,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$6,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(population,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(richness,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.City$CityInfo: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.City$CityInfo.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(CityInfo,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Action$GuardAction has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(com;example;Action;GuardAction;init;,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(GuardAction,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Action$GuardAction: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Action$GuardAction.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(GuardAction,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Action$TavernAction has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(TavernAction,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]), UsedName(com;example;Action;TavernAction;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Action$TavernAction: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Action$TavernAction.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(TavernAction,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Action$ActorAction has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(##,[Default]), UsedName(ActorAction,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Action$ActorAction: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Action$ActorAction.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(ActorAction,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.City$CityInfo$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(lifeQuality,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(merchantActivity,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(copy$default$5,[Default]), UsedName(CityInfo,[Default]), UsedName(tavernOpen,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(com;example;City;CityInfo;init;,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$6,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(population,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(richness,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.City$CityInfo$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.City$CityInfo$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(CityInfo,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Tavern$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(narrow,[Default]), UsedName(_tag,[Default]), UsedName(==,[Default]), UsedName(onSignal,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(context,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(unsafeCast,[Default]), UsedName(synchronized,[Default]), UsedName(Tavern,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receiveSignal,[Default]), UsedName(clone,[Default]), UsedName(receive,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(com;example;Tavern;init;,[Default]), UsedName(!=,[Default]), UsedName(onMessage,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Tavern$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Tavern$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(Tavern,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Blacksmith$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(narrow,[Default]), UsedName(_tag,[Default]), UsedName(==,[Default]), UsedName(onSignal,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(context,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(unsafeCast,[Default]), UsedName(synchronized,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receiveSignal,[Default]), UsedName(clone,[Default]), UsedName(Blacksmith,[Default]), UsedName(receive,[Default]), UsedName(notifyAll,[Default]), UsedName(com;example;Blacksmith;init;,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(onMessage,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Blacksmith$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Blacksmith$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(apply,[Default]), UsedName(Blacksmith,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe com.example.Guard$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(Guard,[Default]), UsedName(asInstanceOf,[Default]), UsedName(narrow,[Default]), UsedName(_tag,[Default]), UsedName(==,[Default]), UsedName(onSignal,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(com;example;Guard;init;,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(context,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(unsafeCast,[Default]), UsedName(synchronized,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receiveSignal,[Default]), UsedName(clone,[Default]), UsedName(receive,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(onMessage,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) com.example.Guard$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) com.example.Guard$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of com.example.AkkaQuickstartSpec: Set(UsedName(Guard,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/home/jorge/Projects/city-simulation/src/test/scala/com/example/AkkaQuickstartSpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(/home/jorge/Projects/city-simulation/src/test/scala/com/quantictime/citysim/AkkaQuickstartSpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(/home/jorge/Projects/city-simulation/target/scala-2.13/test-classes/com/example/AkkaQuickstartSpec.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(com.example.City$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(narrow,[Default]), UsedName(_tag,[Default]), UsedName(==,[Default]), UsedName(onSignal,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(CityInfo,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(context,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(unsafeCast,[Default]), UsedName(synchronized,[Default]), UsedName(com;example;City;init;,[Default]), UsedName(City,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receiveSignal,[Default]), UsedName(clone,[Default]), UsedName(receive,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(onMessage,[Default]), UsedName(##,[Default]))), NamesChange(com.example.Action$GuardAction$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(com;example;Action;GuardAction;init;,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(GuardAction,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]))), NamesChange(com.example.Action$BlacksmithAction$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(BlacksmithAction,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName(com;example;Action;BlacksmithAction;init;,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]))), NamesChange(com.example.Action$TavernAction$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(TavernAction,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]), UsedName(com;example;Action;TavernAction;init;,[Default]))), NamesChange(com.example.Action$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(CreatePopulation,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(Action,[Default]), UsedName(GuardAction,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(BlacksmithAction,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(TavernAction,[Default]), UsedName(!=,[Default]), UsedName(##,[Default]), UsedName(ActorAction,[Default]))), NamesChange(com.example.Action$BlacksmithAction,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(BlacksmithAction,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName(com;example;Action;BlacksmithAction;init;,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]))), NamesChange(com.example.City$CityInfo,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(lifeQuality,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(merchantActivity,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(copy$default$5,[Default]), UsedName(CityInfo,[Default]), UsedName(tavernOpen,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(com;example;City;CityInfo;init;,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$6,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(population,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(richness,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]))), NamesChange(com.example.Action$GuardAction,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(com;example;Action;GuardAction;init;,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(GuardAction,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]))), NamesChange(com.example.Action$TavernAction,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(price,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(closed,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(TavernAction,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(quality,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]), UsedName(com;example;Action;TavernAction;init;,[Default]))), NamesChange(com.example.Action$ActorAction,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(##,[Default]), UsedName(ActorAction,[Default]))), NamesChange(com.example.City$CityInfo$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName(lifeQuality,[Default]), UsedName(==,[Default]), UsedName(copy$default$3,[Default]), UsedName(finalize,[Default]), UsedName(productIterator,[Default]), UsedName(merchantActivity,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(copy$default$5,[Default]), UsedName(CityInfo,[Default]), UsedName(tavernOpen,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(com;example;City;CityInfo;init;,[Default]), UsedName(synchronized,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$6,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(population,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(replyTo,[Default]), UsedName($init$,[Default]), UsedName(copy$default$1,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(richness,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(##,[Default]))), NamesChange(com.example.Tavern$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(narrow,[Default]), UsedName(_tag,[Default]), UsedName(==,[Default]), UsedName(onSignal,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(context,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(unsafeCast,[Default]), UsedName(synchronized,[Default]), UsedName(Tavern,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receiveSignal,[Default]), UsedName(clone,[Default]), UsedName(receive,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(com;example;Tavern;init;,[Default]), UsedName(!=,[Default]), UsedName(onMessage,[Default]), UsedName(##,[Default]))), NamesChange(com.example.Blacksmith$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(narrow,[Default]), UsedName(_tag,[Default]), UsedName(==,[Default]), UsedName(onSignal,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(context,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(unsafeCast,[Default]), UsedName(synchronized,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receiveSignal,[Default]), UsedName(clone,[Default]), UsedName(Blacksmith,[Default]), UsedName(receive,[Default]), UsedName(notifyAll,[Default]), UsedName(com;example;Blacksmith;init;,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(onMessage,[Default]), UsedName(##,[Default]))), NamesChange(com.example.Guard$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(Guard,[Default]), UsedName(asInstanceOf,[Default]), UsedName(narrow,[Default]), UsedName(_tag,[Default]), UsedName(==,[Default]), UsedName(onSignal,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(com;example;Guard;init;,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(context,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(unsafeCast,[Default]), UsedName(synchronized,[Default]), UsedName(getClass,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receiveSignal,[Default]), UsedName(clone,[Default]), UsedName(receive,[Default]), UsedName(notifyAll,[Default]), UsedName(toString,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(onMessage,[Default]), UsedName(##,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(com.example.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(/home/jorge/Projects/city-simulation/src/test/scala/com/example/AkkaQuickstartSpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(com.example.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(com.example.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/jorge/Projects/city-simulation/src/test/scala/com/quantictime/citysim/AkkaQuickstartSpec.scala, /home/jorge/Projects/city-simulation/src/test/scala/com/example/AkkaQuickstartSpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 1 sources: invalidated sources (2) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 1 Scala source to /home/jorge/Projects/city-simulation/target/scala-2.13/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.1.7:compile for Scala 2.13.1[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.1.7:compile for Scala 2.13.1[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 72e2e80e for Scala compiler version 2.13.1[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/jorge/.sdkman/candidates/java/8.0.232-zulu/jre/lib/resources.jar:/home/jorge/.sdkman/candidates/java/8.0.232-zulu/jre/lib/rt.jar:/home/jorge/.sdkman/candidates/java/8.0.232-zulu/jre/lib/sunrsasign.jar:/home/jorge/.sdkman/candidates/java/8.0.232-zulu/jre/lib/jsse.jar:/home/jorge/.sdkman/candidates/java/8.0.232-zulu/jre/lib/jce.jar:/home/jorge/.sdkman/candidates/java/8.0.232-zulu/jre/lib/charsets.jar:/home/jorge/.sdkman/candidates/java/8.0.232-zulu/jre/lib/jfr.jar:/home/jorge/.sdkman/candidates/java/8.0.232-zulu/jre/classes:/home/jorge/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.13.1.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/jorge/Projects/city-simulation/target/scala-2.13/test-classes:/home/jorge/Projects/city-simulation/target/scala-2.13/classes:/home/jorge/.ivy2/cache/com.typesafe.akka/akka-actor-typed_2.13/jars/akka-actor-typed_2.13-2.6.1.jar:/home/jorge/.ivy2/cache/com.typesafe.akka/akka-actor_2.13/jars/akka-actor_2.13-2.6.1.jar:/home/jorge/.ivy2/cache/com.typesafe/config/bundles/config-1.4.0.jar:/home/jorge/.ivy2/cache/org.scala-lang.modules/scala-java8-compat_2.13/jars/scala-java8-compat_2.13-0.9.0.jar:/home/jorge/.ivy2/cache/com.typesafe.akka/akka-slf4j_2.13/jars/akka-slf4j_2.13-2.6.1.jar:/home/jorge/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.29.jar:/home/jorge/.ivy2/cache/ch.qos.logback/logback-classic/jars/logback-classic-1.2.3.jar:/home/jorge/.ivy2/cache/ch.qos.logback/logback-core/jars/logback-core-1.2.3.jar:/home/jorge/.ivy2/cache/com.typesafe.akka/akka-actor-testkit-typed_2.13/jars/akka-actor-testkit-typed_2.13-2.6.1.jar:/home/jorge/.ivy2/cache/com.typesafe.akka/akka-testkit_2.13/jars/akka-testkit_2.13-2.6.1.jar:/home/jorge/.ivy2/cache/org.scalatest/scalatest_2.13/bundles/scalatest_2.13-3.0.8.jar:/home/jorge/.ivy2/cache/org.scalactic/scalactic_2.13/bundles/scalactic_2.13-3.0.8.jar:/home/jorge/.ivy2/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.13.1.jar:/home/jorge/.ivy2/cache/org.scala-lang.modules/scala-xml_2.13/bundles/scala-xml_2.13-1.2.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 0.974734521 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.example.AkkaQuickstartSpec...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.example.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.example.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.example.AkkaQuickstartSpec,ModifiedNames(changes = UsedName(convertToCheckingEqualizer,[Default]), UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(assertionsHelper,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(after,[Default]), UsedName(>=,[Default]), UsedName(AWord,[Default]), UsedName(determined,[Default]), UsedName(<=,[Default]), UsedName(behave,[Default]), UsedName(==,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(contain,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(have,[Default]), UsedName(regex,[Default]), UsedName(afterAll,[Default]), UsedName(between,[Default]), UsedName(stackDepth,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(noElementsOf,[Default]), UsedName(assert,[Default]), UsedName(finalize,[Default]), UsedName(spawn,[Default]), UsedName(pending,[Default]), UsedName(afterWord,[Default]), UsedName(assertCompiles,[Default]), UsedName(rerunner,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(empty,[Default]), UsedName(DecidedWord,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(startWith,[Default]), UsedName(runTests,[Default]), UsedName(RegexWord,[Default]), UsedName(tags,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(eventually,[Default]), UsedName(suiteName,[Default]), UsedName(execute$default$7,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(atMost,[Default]), UsedName(fail,[Default]), UsedName(a,[Default]), UsedName(succeed,[Default]), UsedName(oneElementOf,[Default]), UsedName(withFixture,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(alert,[Default]), UsedName(atLeast,[Default]), UsedName(include,[Default]), UsedName(defined,[Default]), UsedName(defaultEquality,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(they,[Default]), UsedName(===,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(equals,[Default]), UsedName(execute$default$5,[Default]), UsedName(wait,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(decided,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(runNestedSuites,[Default]), UsedName(assertThrows,[Default]), UsedName(notify,[Default]), UsedName(assertTypeError,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(readable,[Default]), UsedName(noneOf,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(ne,[Default]), UsedName(execute$default$4,[Default]), UsedName(synchronized,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute$default$3,[Default]), UsedName(DeterminedWord,[Default]), UsedName(noException,[Default]), UsedName(beforeAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(patience,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(Equalizer,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(expectedTestCount,[Default]), UsedName(length,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(testKitSettings,[Implicit]), UsedName(thrownBy,[Default]), UsedName(definedAt,[Default]), UsedName(inOrderOnly,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(writable,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testDataFor,[Default]), UsedName(<,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(be,[Default]), UsedName(not,[Default]), UsedName(timeout,[Default, Implicit]), UsedName(convertToWordSpecStringWrapper,[Implicit]), UsedName(atMostOneElementOf,[Default]), UsedName(registerTest,[Default]), UsedName(system,[Implicit]), UsedName(assertDoesNotCompile,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected,[Default]), UsedName(interval,[Default]), UsedName(cancel,[Default]), UsedName(sorted,[Default]), UsedName(AkkaQuickstartSpec,[Default]), UsedName(inOrder,[Default]), UsedName(an,[Default]), UsedName(ItWord,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(fullyMatch,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(key,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(getClass,[Default]), UsedName(>,[Default]), UsedName(it,[Default]), UsedName($isInstanceOf,[Default]), UsedName(value,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(createCatchReporter,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(all,[Default]), UsedName(clone,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equal,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(atMostOneOf,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(trap,[Default]), UsedName(exist,[Default]), UsedName(execute$default$1,[Default]), UsedName(NoArgTest,[Default]), UsedName(subjectRegistrationFunction,[Implicit]), UsedName(newTestCanceledException,[Default]), UsedName(no,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(intercept,[Default]), UsedName(PatienceConfig,[Default]), UsedName(endWith,[Default]), UsedName(notifyAll,[Default]), UsedName(matchPattern,[Default]), UsedName(AfterWord,[Default]), UsedName(execute$default$6,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(compile,[Default]), UsedName(assertResult,[Default]), UsedName($init$,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(suiteId,[Default]), UsedName(ValueWord,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(info,[Default]), UsedName(execute$default$2,[Default]), UsedName(!==,[Default]), UsedName(spanScaleFactor,[Default]), UsedName(allOf,[Default]), UsedName(ResultOfTaggedAsInvocationOnString,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(markup,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(toString,[Default]), UsedName(FutureConcept,[Default]), UsedName($asInstanceOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(AnWord,[Default]), UsedName(typeCheck,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(createTestProbe,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(withClue,[Default]), UsedName(styleName,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(oneOf,[Default]), UsedName(KeyWord,[Default]), UsedName(scaled,[Default]), UsedName(WordSpecStringWrapper,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(patienceConfig,[Implicit]), UsedName(atLeastOneOf,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(!=,[Default]), UsedName(RegexWrapper,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(the,[Default]), UsedName(nestedSuites,[Default]), UsedName(com;example;AkkaQuickstartSpec;init;,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(TheAfterWord,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(of,[Default]), UsedName(testNames,[Default]), UsedName(note,[Default]), UsedName(##,[Default]), UsedName(convertScalaFuture,[Implicit]), UsedName(execute,[Default]), UsedName(exactly,[Default]), UsedName(runTest,[Default]), UsedName(testKit,[Default]), UsedName(size,[Default]), UsedName(doCollected,[Default]), UsedName(serializationTestKit,[Default]), UsedName(every,[Default]), UsedName(run,[Default]), UsedName(TheyWord,[Default]), UsedName(message,[Default]), UsedName(whenReady,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(subjectWithAfterWordRegistrationFunction,[Implicit]), UsedName(only,[Default]), UsedName(jsAdjustment,[Default]), UsedName(assume,[Default]))) invalidates 1 classes due to The com.example.AkkaQuickstartSpec has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(patience,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(testKitSettings,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(timeout,[Default, Implicit]), UsedName(convertToWordSpecStringWrapper,[Implicit]), UsedName(system,[Implicit]), UsedName(subjectRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(patienceConfig,[Implicit]), UsedName(convertScalaFuture,[Implicit]), UsedName(subjectWithAfterWordRegistrationFunction,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.example.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.quantictime.citysim.AkkaQuickstartSpec...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.quantictime.citysim.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.quantictime.citysim.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.quantictime.citysim.AkkaQuickstartSpec,ModifiedNames(changes = UsedName(convertToCheckingEqualizer,[Default]), UsedName(hashCode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(assertionsHelper,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(after,[Default]), UsedName(>=,[Default]), UsedName(AWord,[Default]), UsedName(determined,[Default]), UsedName(<=,[Default]), UsedName(behave,[Default]), UsedName(==,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(contain,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(have,[Default]), UsedName(regex,[Default]), UsedName(afterAll,[Default]), UsedName(between,[Default]), UsedName(stackDepth,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(noElementsOf,[Default]), UsedName(assert,[Default]), UsedName(finalize,[Default]), UsedName(spawn,[Default]), UsedName(pending,[Default]), UsedName(afterWord,[Default]), UsedName(assertCompiles,[Default]), UsedName(rerunner,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(empty,[Default]), UsedName(DecidedWord,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(startWith,[Default]), UsedName(runTests,[Default]), UsedName(RegexWord,[Default]), UsedName(tags,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(eventually,[Default]), UsedName(suiteName,[Default]), UsedName(execute$default$7,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(atMost,[Default]), UsedName(fail,[Default]), UsedName(a,[Default]), UsedName(com;quantictime;citysim;AkkaQuickstartSpec;init;,[Default]), UsedName(succeed,[Default]), UsedName(oneElementOf,[Default]), UsedName(withFixture,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(alert,[Default]), UsedName(atLeast,[Default]), UsedName(include,[Default]), UsedName(defined,[Default]), UsedName(defaultEquality,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(they,[Default]), UsedName(===,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(equals,[Default]), UsedName(execute$default$5,[Default]), UsedName(wait,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(decided,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(runNestedSuites,[Default]), UsedName(assertThrows,[Default]), UsedName(notify,[Default]), UsedName(assertTypeError,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(readable,[Default]), UsedName(noneOf,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(ne,[Default]), UsedName(execute$default$4,[Default]), UsedName(synchronized,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute$default$3,[Default]), UsedName(DeterminedWord,[Default]), UsedName(noException,[Default]), UsedName(beforeAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(patience,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(Equalizer,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(expectedTestCount,[Default]), UsedName(length,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(testKitSettings,[Implicit]), UsedName(thrownBy,[Default]), UsedName(definedAt,[Default]), UsedName(inOrderOnly,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(writable,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testDataFor,[Default]), UsedName(<,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(be,[Default]), UsedName(not,[Default]), UsedName(timeout,[Default, Implicit]), UsedName(convertToWordSpecStringWrapper,[Implicit]), UsedName(atMostOneElementOf,[Default]), UsedName(registerTest,[Default]), UsedName(system,[Implicit]), UsedName(assertDoesNotCompile,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected,[Default]), UsedName(interval,[Default]), UsedName(cancel,[Default]), UsedName(sorted,[Default]), UsedName(AkkaQuickstartSpec,[Default]), UsedName(inOrder,[Default]), UsedName(an,[Default]), UsedName(ItWord,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(fullyMatch,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(key,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(getClass,[Default]), UsedName(>,[Default]), UsedName(it,[Default]), UsedName($isInstanceOf,[Default]), UsedName(value,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(createCatchReporter,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(all,[Default]), UsedName(clone,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equal,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(atMostOneOf,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(trap,[Default]), UsedName(exist,[Default]), UsedName(execute$default$1,[Default]), UsedName(NoArgTest,[Default]), UsedName(subjectRegistrationFunction,[Implicit]), UsedName(newTestCanceledException,[Default]), UsedName(no,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(intercept,[Default]), UsedName(PatienceConfig,[Default]), UsedName(endWith,[Default]), UsedName(notifyAll,[Default]), UsedName(matchPattern,[Default]), UsedName(AfterWord,[Default]), UsedName(execute$default$6,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(compile,[Default]), UsedName(assertResult,[Default]), UsedName($init$,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(suiteId,[Default]), UsedName(ValueWord,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(info,[Default]), UsedName(execute$default$2,[Default]), UsedName(!==,[Default]), UsedName(spanScaleFactor,[Default]), UsedName(allOf,[Default]), UsedName(ResultOfTaggedAsInvocationOnString,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(markup,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(toString,[Default]), UsedName(FutureConcept,[Default]), UsedName($asInstanceOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(AnWord,[Default]), UsedName(typeCheck,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(createTestProbe,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(withClue,[Default]), UsedName(styleName,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(oneOf,[Default]), UsedName(KeyWord,[Default]), UsedName(scaled,[Default]), UsedName(WordSpecStringWrapper,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(patienceConfig,[Implicit]), UsedName(atLeastOneOf,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(!=,[Default]), UsedName(RegexWrapper,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(the,[Default]), UsedName(nestedSuites,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(TheAfterWord,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(of,[Default]), UsedName(testNames,[Default]), UsedName(note,[Default]), UsedName(##,[Default]), UsedName(convertScalaFuture,[Implicit]), UsedName(execute,[Default]), UsedName(exactly,[Default]), UsedName(runTest,[Default]), UsedName(testKit,[Default]), UsedName(size,[Default]), UsedName(doCollected,[Default]), UsedName(serializationTestKit,[Default]), UsedName(every,[Default]), UsedName(run,[Default]), UsedName(TheyWord,[Default]), UsedName(message,[Default]), UsedName(whenReady,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(subjectWithAfterWordRegistrationFunction,[Implicit]), UsedName(only,[Default]), UsedName(jsAdjustment,[Default]), UsedName(assume,[Default]))) invalidates 1 classes due to The com.quantictime.citysim.AkkaQuickstartSpec has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(patience,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(testKitSettings,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(timeout,[Default, Implicit]), UsedName(convertToWordSpecStringWrapper,[Implicit]), UsedName(system,[Implicit]), UsedName(subjectRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(patienceConfig,[Implicit]), UsedName(convertScalaFuture,[Implicit]), UsedName(subjectWithAfterWordRegistrationFunction,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.quantictime.citysim.AkkaQuickstartSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
